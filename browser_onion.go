package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/PuerkitoBio/goquery"
)

func mostrarBanner() {
	banner := `
 ‚ñÑ‚ñÑ‚ñÑ‚ñÑ    ‚ñà    ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñÑ   ‚ñÑ‚ñÑ‚ñÑ      ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ  ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà        ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñÑ    ‚ñà  ‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñÑ    ‚ñà 
‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ  ‚ñà‚ñà  ‚ñì‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà    ‚ñí ‚ñí‚ñà‚ñà‚ñÄ ‚ñÄ‚ñà  ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñÑ    ‚ñí‚ñà‚ñà‚ñÄ ‚ñà‚ñà‚ñå‚ñí‚ñà‚ñà‚ñí  ‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà ‚ñí ‚ñà‚ñà‚ñí     ‚ñí‚ñà‚ñà‚ñí  ‚ñà‚ñà‚ñí ‚ñà‚ñà ‚ñÄ‚ñà   ‚ñà ‚ñì‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñí  ‚ñà‚ñà‚ñí ‚ñà‚ñà ‚ñÄ‚ñà   ‚ñà 
‚ñí‚ñà‚ñà‚ñí ‚ñÑ‚ñà‚ñà‚ñì‚ñà‚ñà  ‚ñí‚ñà‚ñà‚ñë‚ñë ‚ñì‚ñà‚ñà‚ñÑ   ‚ñí‚ñì‚ñà    ‚ñÑ ‚ñí‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ  ‚ñë‚ñà‚ñà   ‚ñà‚ñå‚ñí‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà ‚ñë‚ñÑ‚ñà ‚ñí     ‚ñí‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà  ‚ñÄ‚ñà ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà  ‚ñÄ‚ñà ‚ñà‚ñà‚ñí
‚ñí‚ñà‚ñà‚ñë‚ñà‚ñÄ  ‚ñì‚ñì‚ñà  ‚ñë‚ñà‚ñà‚ñë  ‚ñí   ‚ñà‚ñà‚ñí‚ñí‚ñì‚ñì‚ñÑ ‚ñÑ‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà ‚ñë‚ñì‚ñà‚ñÑ   ‚ñå‚ñí‚ñà‚ñà   ‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ       ‚ñí‚ñà‚ñà   ‚ñà‚ñà‚ñë‚ñì‚ñà‚ñà‚ñí  ‚ñê‚ñå‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà   ‚ñà‚ñà‚ñë‚ñì‚ñà‚ñà‚ñí  ‚ñê‚ñå‚ñà‚ñà‚ñí
‚ñë‚ñì‚ñà  ‚ñÄ‚ñà‚ñì‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí ‚ñì‚ñà‚ñà‚ñà‚ñÄ ‚ñë ‚ñì‚ñà   ‚ñì‚ñà‚ñà‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñì ‚ñë ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñë‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñí ‚ñà‚ñà‚ñì ‚ñë ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñí‚ñà‚ñà‚ñë   ‚ñì‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñí‚ñà‚ñà‚ñë   ‚ñì‚ñà‚ñà‚ñë
‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñÄ‚ñí‚ñë‚ñí‚ñì‚ñí ‚ñí ‚ñí ‚ñí ‚ñí‚ñì‚ñí ‚ñí ‚ñë‚ñë ‚ñë‚ñí ‚ñí  ‚ñë ‚ñí‚ñí   ‚ñì‚ñí‚ñà‚ñë ‚ñí‚ñí‚ñì  ‚ñí ‚ñë ‚ñí‚ñë‚ñí‚ñë‚ñí‚ñë ‚ñë ‚ñí‚ñì ‚ñë‚ñí‚ñì‚ñë ‚ñí‚ñì‚ñí ‚ñë ‚ñí‚ñë‚ñí‚ñë‚ñí‚ñë ‚ñë ‚ñí‚ñë   ‚ñí ‚ñí ‚ñë‚ñì  ‚ñë ‚ñí‚ñë‚ñí‚ñë‚ñí‚ñë ‚ñë ‚ñí‚ñë   ‚ñí ‚ñí 
‚ñí‚ñë‚ñí   ‚ñë ‚ñë‚ñë‚ñí‚ñë ‚ñë ‚ñë ‚ñë ‚ñë‚ñí  ‚ñë ‚ñë  ‚ñë  ‚ñí     ‚ñí   ‚ñí‚ñí ‚ñë ‚ñë ‚ñí  ‚ñí   ‚ñë ‚ñí ‚ñí‚ñë   ‚ñë‚ñí ‚ñë ‚ñí‚ñë ‚ñë‚ñí    ‚ñë ‚ñí ‚ñí‚ñë ‚ñë ‚ñë‚ñë   ‚ñë ‚ñí‚ñë ‚ñí ‚ñë  ‚ñë ‚ñí ‚ñí‚ñë ‚ñë ‚ñë‚ñë   ‚ñë ‚ñí‚ñë
 ‚ñë    ‚ñë  ‚ñë‚ñë‚ñë ‚ñë ‚ñë ‚ñë  ‚ñë  ‚ñë  ‚ñë          ‚ñë   ‚ñí    ‚ñë ‚ñë  ‚ñë ‚ñë ‚ñë ‚ñë ‚ñí    ‚ñë‚ñë   ‚ñë  ‚ñë   ‚ñë ‚ñë ‚ñë ‚ñí     ‚ñë   ‚ñë ‚ñë  ‚ñí ‚ñë‚ñë ‚ñë ‚ñë ‚ñí     ‚ñë   ‚ñë ‚ñë 
 ‚ñë         ‚ñë           ‚ñë  ‚ñë ‚ñë            ‚ñë  ‚ñë   ‚ñë        ‚ñë ‚ñë     ‚ñë       ‚ñë      ‚ñë ‚ñë           ‚ñë  ‚ñë      ‚ñë ‚ñë           ‚ñë 
      ‚ñë                   ‚ñë                   ‚ñë                          ‚ñë                                              
`
	fmt.Println(banner)
}

func buscarOnion(termino string) []string {
	fmt.Printf("\nüîç Buscando sitios .onion relacionados con: %s\n", termino)
	url := fmt.Sprintf("https://ahmia.fi/search/?q=%s", termino)
	client := &http.Client{Timeout: 15 * time.Second}
	req, _ := http.NewRequest("GET", url, nil)
	req.Header.Set("User-Agent", "Mozilla/5.0")
	resp, err := client.Do(req)
	if err != nil {
		fmt.Printf("[!] Error al conectar con Ahmia: %v\n", err)
		return nil
	}
	defer resp.Body.Close()
	doc, err := goquery.NewDocumentFromReader(resp.Body)
	if err != nil {
		fmt.Printf("[!] Error al parsear HTML: %v\n", err)
		return nil
	}
	enlaces := make(map[string]struct{})
	doc.Find("a").Each(func(i int, s *goquery.Selection) {
		href, exists := s.Attr("href")
		if exists && strings.Contains(href, ".onion") {
			enlaces[strings.TrimSpace(href)] = struct{}{}
		}
	})
	var resultados []string
	for enlace := range enlaces {
		resultados = append(resultados, enlace)
	}
	return resultados
}

func buscarDesdeArchivo(path string) map[string]struct{} {
	resultadosUnicos := make(map[string]struct{})
	f, err := os.Open(path)
	if err != nil {
		fmt.Println("No se pudo abrir el archivo:", err)
		return resultadosUnicos
	}
	defer f.Close()
	scanner := bufio.NewScanner(f)
	for scanner.Scan() {
		kw := strings.TrimSpace(scanner.Text())
		if kw == "" {
			continue
		}
		resultados := buscarOnion(kw)
		for _, r := range resultados {
			resultadosUnicos[r] = struct{}{}
		}
	}
	return resultadosUnicos
}

func exportarOnionLinksJSON(links map[string]struct{}, filename string) error {
	f, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer f.Close()
	arr := make([]string, 0, len(links))
	for l := range links {
		arr = append(arr, l)
	}
	encoder := json.NewEncoder(f)
	encoder.SetIndent("", "  ")
	return encoder.Encode(arr)
}

func main() {
	mostrarBanner()
	fmt.Println("üßÖ Buscador interactivo de sitios .onion\n")
	fmt.Printf("[%s] ", time.Now().Format("15:04:05"))
	fmt.Print("¬øBuscar desde archivo de palabras clave? (s/n): ")
	var resp string
	fmt.Scanln(&resp)
	var resultadosUnicos map[string]struct{}
	if strings.ToLower(resp) == "s" {
		fmt.Print("Ruta del archivo: ")
		var path string
		fmt.Scanln(&path)
		resultadosUnicos = buscarDesdeArchivo(path)
	} else {
		fmt.Printf("[%s] ", time.Now().Format("15:04:05"))
		fmt.Print("Ingresa palabra(s) clave (separa por coma): ")
		reader := bufio.NewReader(os.Stdin)
		line, _ := reader.ReadString('\n')
		line = strings.TrimSpace(line)
		if line == "" {
			fmt.Println("[!] No ingresaste ninguna palabra clave.")
			os.Exit(1)
		}
		keywords := strings.Split(line, ",")
		resultadosUnicos = make(map[string]struct{})
		for _, kw := range keywords {
			kw = strings.TrimSpace(kw)
			if kw == "" {
				continue
			}
			resultados := buscarOnion(kw)
			for _, r := range resultados {
				if strings.HasSuffix(r, ".onion") {
					resultadosUnicos[r] = struct{}{}
				}
			}
		}
	}
	if len(resultadosUnicos) == 0 {
		fmt.Println("‚ö†Ô∏è No se encontraron resultados.")
	} else {
		fmt.Printf("\n‚úÖ Se encontraron %d enlaces .onion √∫nicos:\n\n", len(resultadosUnicos))
		for r := range resultadosUnicos {
			fmt.Println("   -", r)
		}
		timestamp := time.Now().Format("20060102_150405")
		txtFile := fmt.Sprintf("resultados_onion_%s.txt", timestamp)
		jsonFile := fmt.Sprintf("resultados_onion_%s.json", timestamp)
		f, err := os.Create(txtFile)
		if err != nil {
			fmt.Println("[!] No se pudo guardar el archivo de resultados.")
			return
		}
		defer f.Close()
		for r := range resultadosUnicos {
			f.WriteString(r + "\n")
		}
		exportarOnionLinksJSON(resultadosUnicos, jsonFile)
		fmt.Printf("\nüìÅ Resultados guardados en '%s' y '%s'.\n", txtFile, jsonFile)
	}
}
